<?php declare(strict_types=1);

namespace Stefna\DIMConverter\Hunspell;

use InvalidArgumentException;

final class HunspellDb
{
	private array $dic;
	private array $sfx;

	public static function findSfxParts(string $stem, string $word): array
	{
		if ($stem === $word) {
			return [];
		}
		$longestCommonPrefix = self::longestCommonPrefix([$stem, $word]);
		$len = mb_strlen($longestCommonPrefix);

		$strip = mb_substr($stem, $len) ?: '0';
		$suffix = mb_substr($word, $len) ?: '0';

		return [
			$strip,
			$suffix,
		];
	}

	public function __construct(array $dic, array $sfx)
	{
		$this->dic = $dic;
		$this->sfx = $sfx;
	}

	/**
	 * @return list<string>
	 */
	public function getDictLines(): array
	{
		return $this->dic;
	}

	public function getTotal(): int
	{
		return count($this->dic);
	}

	public function getAffHeaders(): array
	{
		return [
			'Generated by icelandic-mophology-database-converter',
			'SET UTF-8',
			'',
			'#Letter frequency based on all Icelandic text from www.snerpa.is/net',
			'TRY arniesutðglmkofhvþádíójbúyöæépÞHSEGýBAVKNOFMJDLRÍÁTÓxIÉUzPÖcÚÆYÐCqXwÝQWZ',
			'WORDCHARS "-./=',
			'KEY qwertyuiopð|asdfghjklæ|zxcvbnm,.þ',
			'',
			'#Splitted suggestions are most likely compound words',
			'NOSPLITSUGS',
		];
	}

	public function getSfx(): array
	{
		$ret = [];
		foreach ($this->sfx as $index => $data) {
			$sfxNum = $index + 1;
			$stem = $data['word'];
			$words = $data['words'];
			$ret[] = sprintf('# Word: %s', $stem);
			$ret[] = sprintf('SFX %d N %d', $sfxNum, count($words));
			foreach ($words as $word) {
				[$strip, $replace] = self::findSfxParts($stem, $word);
				$ret[] = sprintf(
					'SFX %d %s %s',
					$sfxNum,
					$strip,
					$replace,
				);
			}
		}
		return $ret;
	}

	private static function longestCommonPrefix(array $array): string
	{
		if (!$array) {
			throw new InvalidArgumentException('Must provide a non empty array');
		}
		$ret = array_pop($array);
		foreach ($array as $item) {
			$ret = self::checkCommonPrefix($ret, $item);
		}
		return $ret;
	}

	private static function checkCommonPrefix(string $a, string $b): string
	{
		$ret = '';
		$len = min(mb_strlen($a), mb_strlen($b));
		$i = 0;
		while ($i < $len) {
			$ta = mb_substr($a, $i, 1);
			$tb = mb_substr($b, $i, 1);
			if ($ta !== $tb) {
				break;
			}
			$ret .= $ta;
			$i++;
		}
		return $ret;
	}
}
